#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << NAME << " has LRU replacement policy" << endl;
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // baseline LRU
    return lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type);
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{

    if ((type == WRITEBACK) && ip)
        assert(0);

    if (!hit)
    {
        core_misses[cpu]++;
    }
    inst_at_LLC++;
    if (inst_at_LLC >= heuristic_threshold)
    {
        if (core_misses[0] >= 2 * core_misses[1])
        {
            core0_mask = min(core0_mask + 31, NUM_SET - 32 - 1);
            core1_base = min(core1_base + 32, NUM_SET - 32);
            core1_mask = NUM_SET - core1_base - 1;
            // cout << "REPARTITION: core0 mask: " << core0_mask << " core1 base" << core1_base << " core1_mask: " << core1_mask << endl;
        }
        else if (core_misses[1] >= 2 * core_misses[0])
        {
            core0_mask = max(core0_mask - 31, 31U);
            core1_base = max(core1_base - 32, 32U);
            core1_mask = NUM_SET - core1_base - 1;
            // cout << "REPARTITION: core0 mask: " << core0_mask << " core1 base" << core1_base << " core1_mask: " << core1_mask << endl;
        }

        inst_at_LLC = 0;
        core_misses[0] = core_misses[1] = 0;
    }

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    return lru_update(set, way);
}

void CACHE::llc_replacement_final_stats()
{
    cout << endl
         << "CPU 0 " << "Self-eviction count: " << self_eviction[0] << endl;
    cout << "CPU 1 " << "Self-eviction count: " << self_eviction[1] << endl;
}
